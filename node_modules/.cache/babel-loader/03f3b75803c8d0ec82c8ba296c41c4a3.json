{"ast":null,"code":"var _jsxFileName = \"/Users/Edwin/Desktop/Programming/HomeWork/Click-Game/clicky/src/components/Game/index.js\";\nimport React, { Component } from \"react\";\nimport Card from \"../Card\";\nimport cardData from \"../../fighter.json\";\nimport Nav from \"../Navbar\";\nimport Jumbotron from \"../Jumbotron\";\nimport './style.scss';\n\nclass Game extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      score: 0,\n      highScore: 0,\n      cardData,\n      clickedList: []\n    };\n\n    this.handleClick = id => {\n      const _this$state = this.state,\n            score = _this$state.score,\n            clickedList = _this$state.clickedList,\n            cardData = _this$state.cardData,\n            highScore = _this$state.highScore;\n      this.RadomizeCards(cardData);\n      const alreadyClicked = clickedList.includes(id);\n\n      if (alreadyClicked) {\n        const bestScore = Math.max(score, highScore);\n        this.resetGame(bestScore);\n      } else {\n        const newScore = score + 1;\n        this.setState({\n          score: score + 1,\n          clickedList: [...clickedList, id]\n        });\n        if (newScore === cardData.length) this.resetGame(newScore);\n      }\n    };\n\n    this.resetGame = highScore => {\n      this.setState({\n        score: 0,\n        clickedList: [],\n        highScore: highScore\n      });\n    };\n\n    this.RadomizeCards = array => {\n      for (var i = array.length - 1; i > 0; i--) {\n        var j = Math.floor(Math.random() * (i + 1));\n        var temp = array[i];\n        array[i] = array[j];\n        array[j] = temp;\n      }\n\n      this.setState({\n        cardData: [...array]\n      });\n    };\n  }\n\n  componentDidMount() {\n    const cardData = this.state.cardData;\n    this.RadomizeCards(cardData);\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }, React.createElement(Nav, {\n      primaryHeadingText: \"Score:\",\n      primaryHeadingValue: this.state.score,\n      secondaryHeadingText: \"High Score:\",\n      secondaryHeadingValue: this.state.highScore,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }), React.createElement(Jumbotron, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      class: \"cards\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }, this.state.cardData.map(card => React.createElement(Card, {\n      name: card.name,\n      image: card.image,\n      key: card.id,\n      id: card.id,\n      handleClick: this.handleClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }))));\n  }\n\n}\n\nexport default Game;","map":{"version":3,"sources":["/Users/Edwin/Desktop/Programming/HomeWork/Click-Game/clicky/src/components/Game/index.js"],"names":["React","Component","Card","cardData","Nav","Jumbotron","Game","state","score","highScore","clickedList","handleClick","id","RadomizeCards","alreadyClicked","includes","bestScore","Math","max","resetGame","newScore","setState","length","array","i","j","floor","random","temp","componentDidMount","render","map","card","name","image"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Card from \"../Card\";\nimport cardData from \"../../fighter.json\";\nimport Nav from \"../Navbar\";\nimport Jumbotron from \"../Jumbotron\";\nimport './style.scss';\n\nclass Game extends Component {\n\n    state = {\n        score: 0,\n        highScore: 0,\n        cardData,\n        clickedList: []\n    }\n\n    componentDidMount() {\n        const { cardData } = this.state;\n        this.RadomizeCards(cardData);\n    }\n\n    handleClick = (id) => {\n        const { score, clickedList, cardData, highScore } = this.state;\n        this.RadomizeCards(cardData)\n        const alreadyClicked = clickedList.includes(id);\n        if (alreadyClicked) {\n            const bestScore = Math.max(score, highScore)\n            this.resetGame(bestScore);\n        } else {\n            const newScore = score + 1;\n            this.setState({\n                score: score + 1,\n                clickedList: [...clickedList, id]\n            })\n            if (newScore === cardData.length)\n                this.resetGame(newScore);\n        }\n    }\n\n    resetGame = highScore => {\n        this.setState({\n            score: 0,\n            clickedList: [],\n            highScore: highScore\n        })\n    }\n\n    RadomizeCards = (array) => {\n        for (var i = array.length - 1; i > 0; i--) {\n            var j = Math.floor(Math.random() * (i + 1));\n            var temp = array[i];\n            array[i] = array[j];\n            array[j] = temp;\n        }\n\n        this.setState({\n            cardData: [...array]\n        })\n    }\n\n    render() {\n        return (\n            <div>\n                <Nav\n                    primaryHeadingText=\"Score:\"\n                    primaryHeadingValue={this.state.score}\n                    secondaryHeadingText=\"High Score:\"\n                    secondaryHeadingValue={this.state.highScore}\n                />\n                <Jumbotron />\n                <div class=\"cards\">\n                    {this.state.cardData.map((card) => (\n                        <Card\n                            name={card.name}\n                            image={card.image}\n                            key={card.id}\n                            id={card.id}\n                            handleClick={this.handleClick}\n                        />\n                    ))}\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Game;"]},"metadata":{},"sourceType":"module"}